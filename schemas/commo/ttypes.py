#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class GameStatus(object):
    WAITING_FOR_PLAYERS = 1
    STARTED = 2
    ENDED = 3

    _VALUES_TO_NAMES = {
        1: "WAITING_FOR_PLAYERS",
        2: "STARTED",
        3: "ENDED",
    }

    _NAMES_TO_VALUES = {
        "WAITING_FOR_PLAYERS": 1,
        "STARTED": 2,
        "ENDED": 3,
    }


class StatusCode(object):
    SUCCESS = 1
    ILLEGAL_ACTION = 2
    YOU_ARE_A_HACKER = 3

    _VALUES_TO_NAMES = {
        1: "SUCCESS",
        2: "ILLEGAL_ACTION",
        3: "YOU_ARE_A_HACKER",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 1,
        "ILLEGAL_ACTION": 2,
        "YOU_ARE_A_HACKER": 3,
    }


class ActionType(object):
    MOVE = 1
    ATTACK = 2
    HEAL = 3

    _VALUES_TO_NAMES = {
        1: "MOVE",
        2: "ATTACK",
        3: "HEAL",
    }

    _NAMES_TO_VALUES = {
        "MOVE": 1,
        "ATTACK": 2,
        "HEAL": 3,
    }


class Location(object):
    """
    Attributes:
     - x
     - y
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'x', None, None, ),  # 1
        (2, TType.I32, 'y', None, None, ),  # 2
    )

    def __init__(self, x=None, y=None,):
        self.x = x
        self.y = y

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.x = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.y = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Location')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.I32, 1)
            oprot.writeI32(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.I32, 2)
            oprot.writeI32(self.y)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlayerState(object):
    """
    Attributes:
     - location
     - health
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'location', (Location, Location.thrift_spec), None, ),  # 1
        (2, TType.I32, 'health', None, None, ),  # 2
    )

    def __init__(self, location=None, health=None,):
        self.location = location
        self.health = health

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PlayerState')
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 1)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 2)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GameState(object):
    """
    Attributes:
     - player_states
     - clusters
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'player_states', (TType.I32, None, TType.STRUCT, (PlayerState, PlayerState.thrift_spec), False), None, ),  # 1
        (2, TType.MAP, 'clusters', (TType.I32, None, TType.I32, None, False), None, ),  # 2
    )

    def __init__(self, player_states=None, clusters=None,):
        self.player_states = player_states
        self.clusters = clusters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.player_states = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI32()
                        _val6 = PlayerState()
                        _val6.read(iprot)
                        self.player_states[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.clusters = {}
                    (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                    for _i11 in range(_size7):
                        _key12 = iprot.readI32()
                        _val13 = iprot.readI32()
                        self.clusters[_key12] = _val13
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GameState')
        if self.player_states is not None:
            oprot.writeFieldBegin('player_states', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.player_states))
            for kiter14, viter15 in self.player_states.items():
                oprot.writeI32(kiter14)
                viter15.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.clusters is not None:
            oprot.writeFieldBegin('clusters', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.clusters))
            for kiter16, viter17 in self.clusters.items():
                oprot.writeI32(kiter16)
                oprot.writeI32(viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StartGameResponse(object):
    """
    Attributes:
     - status
     - updated_game_state
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'status', None, None, ),  # 1
        (2, TType.STRUCT, 'updated_game_state', (GameState, GameState.thrift_spec), None, ),  # 2
    )

    def __init__(self, status=None, updated_game_state=None,):
        self.status = status
        self.updated_game_state = updated_game_state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.updated_game_state = GameState()
                    self.updated_game_state.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('StartGameResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.updated_game_state is not None:
            oprot.writeFieldBegin('updated_game_state', TType.STRUCT, 2)
            self.updated_game_state.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Action(object):
    """
    Attributes:
     - type
     - move_target
     - attack_target
     - heal_target
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, None, ),  # 1
        (2, TType.STRUCT, 'move_target', (Location, Location.thrift_spec), None, ),  # 2
        (3, TType.I32, 'attack_target', None, None, ),  # 3
        (4, TType.I32, 'heal_target', None, None, ),  # 4
    )

    def __init__(self, type=None, move_target=None, attack_target=None, heal_target=None,):
        self.type = type
        self.move_target = move_target
        self.attack_target = attack_target
        self.heal_target = heal_target

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.move_target = Location()
                    self.move_target.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attack_target = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.heal_target = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Action')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.move_target is not None:
            oprot.writeFieldBegin('move_target', TType.STRUCT, 2)
            self.move_target.write(oprot)
            oprot.writeFieldEnd()
        if self.attack_target is not None:
            oprot.writeFieldBegin('attack_target', TType.I32, 3)
            oprot.writeI32(self.attack_target)
            oprot.writeFieldEnd()
        if self.heal_target is not None:
            oprot.writeFieldBegin('heal_target', TType.I32, 4)
            oprot.writeI32(self.heal_target)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ActionResponse(object):
    """
    Attributes:
     - status
     - updated_game_state
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'status', None, None, ),  # 1
        (2, TType.STRUCT, 'updated_game_state', (GameState, GameState.thrift_spec), None, ),  # 2
    )

    def __init__(self, status=None, updated_game_state=None,):
        self.status = status
        self.updated_game_state = updated_game_state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.updated_game_state = GameState()
                    self.updated_game_state.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ActionResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.updated_game_state is not None:
            oprot.writeFieldBegin('updated_game_state', TType.STRUCT, 2)
            self.updated_game_state.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
