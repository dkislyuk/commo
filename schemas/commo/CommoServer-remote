#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from commo import CommoServer
from commo.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '  i32 join_game()'
  print '  ShardLeaderAssignmentResponse get_shard_assignments()'
  print '  void confirm_shard_leader(i32 player_id, i32 shard_id)'
  print '  StartGameResponse start_game()'
  print '  ActionResponse take_action(i32 player_id, Action action)'
  print '  LeaveShardResponse leave_shard(i32 player_id, i32 shard_id)'
  print '  JoinShardResponse join_shard(i32 player_id, i32 shard_id, PlayerState player_state)'
  print '  ClockSyncResponse clock_sync(i32 client_id, i64 timestamp)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = CommoServer.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'join_game':
  if len(args) != 0:
    print 'join_game requires 0 args'
    sys.exit(1)
  pp.pprint(client.join_game())

elif cmd == 'get_shard_assignments':
  if len(args) != 0:
    print 'get_shard_assignments requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_shard_assignments())

elif cmd == 'confirm_shard_leader':
  if len(args) != 2:
    print 'confirm_shard_leader requires 2 args'
    sys.exit(1)
  pp.pprint(client.confirm_shard_leader(eval(args[0]),eval(args[1]),))

elif cmd == 'start_game':
  if len(args) != 0:
    print 'start_game requires 0 args'
    sys.exit(1)
  pp.pprint(client.start_game())

elif cmd == 'take_action':
  if len(args) != 2:
    print 'take_action requires 2 args'
    sys.exit(1)
  pp.pprint(client.take_action(eval(args[0]),eval(args[1]),))

elif cmd == 'leave_shard':
  if len(args) != 2:
    print 'leave_shard requires 2 args'
    sys.exit(1)
  pp.pprint(client.leave_shard(eval(args[0]),eval(args[1]),))

elif cmd == 'join_shard':
  if len(args) != 3:
    print 'join_shard requires 3 args'
    sys.exit(1)
  pp.pprint(client.join_shard(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'clock_sync':
  if len(args) != 2:
    print 'clock_sync requires 2 args'
    sys.exit(1)
  pp.pprint(client.clock_sync(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
